import os
import logging
import socket
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from wakeonlan import send_magic_packet

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Ö –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç)
TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
ALLOWED_USER_IDS = [int(id_) for id_ in os.getenv('ALLOWED_USER_IDS', '916373186').split(',')]
PC_MAC_ADDRESS = os.getenv('PC_MAC_ADDRESS', 'B4:2E:99:EA:D7:0E')
PC_IP_ADDRESS = os.getenv('PC_IP_ADDRESS', '192.168.31.193')

logger.info('–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –°—Ç–∞—Ç—É—Å –ü–ö", callback_data="status")],
        [
            InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –ü–ö", callback_data="turn_on"),
            InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö", callback_data="turn_off"),
        ]
    ]
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º –ü–ö:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id not in ALLOWED_USER_IDS:
        await query.edit_message_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    try:
        if query.data == "status":
            status = await check_pc_status()
            await query.edit_message_text(text=f"–°—Ç–∞—Ç—É—Å –ü–ö: {status}")
        elif query.data == "turn_on":
            result = await turn_on_pc()
            await query.edit_message_text(text=result)
        elif query.data == "turn_off":
            result = await turn_off_pc()
            await query.edit_message_text(text=result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def check_pc_status() -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ü–ö"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(2)
            result = s.connect_ex((PC_IP_ADDRESS, 3389))  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç RDP
            return "üü¢ –í–∫–ª—é—á–µ–Ω" if result == 0 else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"

async def turn_on_pc() -> str:
    """–í–∫–ª—é—á–µ–Ω–∏–µ –ü–ö —á–µ—Ä–µ–∑ WOL"""
    try:
        if "–í–∫–ª—é—á–µ–Ω" in await check_pc_status():
            return "–ü–ö —É–∂–µ –≤–∫–ª—é—á–µ–Ω"
            
        send_magic_packet(PC_MAC_ADDRESS)
        return "üü¢ –°–∏–≥–Ω–∞–ª Wake-on-LAN –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–ö –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –º–∏–Ω—É—Ç."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤–∫–ª—é—á–µ–Ω–∏—è"

async def turn_off_pc() -> str:
    try:
        subprocess.run(['shutdown', '/s', '/t', '0'], check=True)
        return "üî¥ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
    except Exception as e:
        return f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_error_handler(lambda u, c: logger.error(f"–û—à–∏–±–∫–∞: {c.error}"))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()

