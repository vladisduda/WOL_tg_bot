import os
import logging
import subprocess
import socket
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from wakeonlan import send_magic_packet

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
ALLOWED_USER_IDS = [int(user_id) for user_id in os.environ.get('ALLOWED_USER_IDS', '').split(',') if user_id]
PC_MAC_ADDRESS = os.environ.get('PC_MAC_ADDRESS')
PC_IP_ADDRESS = os.environ.get('PC_IP_ADDRESS')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø."""
    user_id = update.effective_user.id

    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return

    keyboard = [
        [
            InlineKeyboardButton("üîÑ –°—Ç–∞—Ç—É—Å –ü–ö", callback_data="status"),
        ],
        [
            InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –ü–ö", callback_data="turn_on"),
            InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö", callback_data="turn_off"),
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º –ü–ö:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    user_id = query.from_user.id

    if user_id not in ALLOWED_USER_IDS:
        await query.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await query.answer()

    if query.data == "status":
        status = check_pc_status()
        await query.edit_message_text(
            text=f"–°—Ç–∞—Ç—É—Å –ü–ö: {status}",
            reply_markup=query.message.reply_markup
        )
    elif query.data == "turn_on":
        result = turn_on_pc()
        await query.edit_message_text(
            text=f"{result}",
            reply_markup=query.message.reply_markup
        )
    elif query.data == "turn_off":
        result = turn_off_pc()
        await query.edit_message_text(
            text=f"{result}",
            reply_markup=query.message.reply_markup
        )

def check_pc_status() -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ü–ö (–≤–∫–ª—é—á–µ–Ω/–≤—ã–∫–ª—é—á–µ–Ω)."""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ ping (–æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 1 —Å–µ–∫—É–Ω–¥–∞)
        param = '-n' if os.name == 'nt' else '-c'
        command = ['ping', param, '1', '-w', '1', PC_IP_ADDRESS]

        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        if result.returncode == 0:
            return "üü¢ –í–∫–ª—é—á–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–µ—Ç–∏"
        else:
            return "üî¥ –í—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ü–ö: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"

def turn_on_pc() -> str:
    """–í–∫–ª—é—á–∞–µ—Ç –ü–ö —Å –ø–æ–º–æ—â—å—é Wake-on-LAN."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞, –Ω–µ –≤–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ –ü–ö
        status = check_pc_status()
        if "–í–∫–ª—é—á–µ–Ω" in status:
            return "–ü–ö —É–∂–µ –≤–∫–ª—é—á–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–µ—Ç–∏."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Magic Packet
        send_magic_packet(PC_MAC_ADDRESS)

        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        time.sleep(5)  # –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        status = check_pc_status()

        if "–í–∫–ª—é—á–µ–Ω" in status:
            return "‚úÖ –ü–ö —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω!"
        else:
            return "üîÑ –°–∏–≥–Ω–∞–ª –Ω–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –ü–ö –ø–æ–∫–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ."

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ü–ö: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ü–ö: {str(e)}"

def turn_off_pc() -> str:
    try:
        subprocess.run(['shutdown', '/s', '/t', '0'], check=True)
        return "üî¥ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
    except Exception as e:
        return f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
